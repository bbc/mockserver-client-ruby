=begin
#Mock Server API

#MockServer enables easy mocking of any system you integrate with via HTTP or HTTPS with clients written in Java, JavaScript and Ruby and a simple REST API (as shown below).  MockServer Proxy is a proxy that introspects all proxied traffic including encrypted SSL traffic and supports Port Forwarding, Web Proxying (i.e. HTTP proxy), HTTPS Tunneling Proxying (using HTTP CONNECT) and SOCKS Proxying (i.e. dynamic port forwarding).  Both MockServer and the MockServer Proxy record all received requests so that it is possible to verify exactly what requests have been sent by the system under test.

OpenAPI spec version: 5.3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.1

=end

# Common files
require 'mockserver-client/api_client'
require 'mockserver-client/api_error'
require 'mockserver-client/version'
require 'mockserver-client/configuration'

# Models
require 'mockserver-client/models/body'
require 'mockserver-client/models/body_with_content_type'
require 'mockserver-client/models/connection_options'
require 'mockserver-client/models/delay'
require 'mockserver-client/models/expectation'
require 'mockserver-client/models/expectations'
require 'mockserver-client/models/http_class_callback'
require 'mockserver-client/models/http_error'
require 'mockserver-client/models/http_forward'
require 'mockserver-client/models/http_object_callback'
require 'mockserver-client/models/http_override_forwarded_request'
require 'mockserver-client/models/http_request'
require 'mockserver-client/models/http_response'
require 'mockserver-client/models/http_template'
require 'mockserver-client/models/key_to_multi_value'
require 'mockserver-client/models/key_to_value'
require 'mockserver-client/models/ports'
require 'mockserver-client/models/time_to_live'
require 'mockserver-client/models/times'
require 'mockserver-client/models/verification'
require 'mockserver-client/models/verification_sequence'
require 'mockserver-client/models/verification_times'

# APIs
require 'mockserver-client/api/control_api'
require 'mockserver-client/api/expectation_api'
require 'mockserver-client/api/verify_api'

module MockServer
  class << self
    # Customize default settings for the SDK using block.
    #   MockServer.configure do |config|
    #     config.username = "xxx"
    #     config.password = "xxx"
    #   end
    # If no block given, return the default Configuration object.
    def configure
      if block_given?
        yield(Configuration.default)
      else
        Configuration.default
      end
    end
  end
end
