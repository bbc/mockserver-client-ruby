=begin
#Mock Server API

#MockServer enables easy mocking of any system you integrate with via HTTP or HTTPS with clients written in Java, JavaScript and Ruby and a simple REST API (as shown below).  MockServer Proxy is a proxy that introspects all proxied traffic including encrypted SSL traffic and supports Port Forwarding, Web Proxying (i.e. HTTP proxy), HTTPS Tunneling Proxying (using HTTP CONNECT) and SOCKS Proxying (i.e. dynamic port forwarding).  Both MockServer and the MockServer Proxy record all received requests so that it is possible to verify exactly what requests have been sent by the system under test.

OpenAPI spec version: 5.3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.1

=end

require 'uri'

module MockServer
  class ExpectationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # create expectation
    # @param expectations expectation to create
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def expectation_put(expectations, opts = {})
      expectation_put_with_http_info(expectations, opts)
      nil
    end

    # create expectation
    # @param expectations expectation to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def expectation_put_with_http_info(expectations, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpectationApi.expectation_put ...'
      end
      # verify the required parameter 'expectations' is set
      if @api_client.config.client_side_validation && expectations.nil?
        fail ArgumentError, "Missing the required parameter 'expectations' when calling ExpectationApi.expectation_put"
      end
      # resource path
      local_var_path = '/mockserver/expectation'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(expectations)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpectationApi#expectation_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
